{"mappings":"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","sources":["taqueria-plugin-ligo/index.ts","taqueria-plugin-ligo/compile.ts"],"sourcesContent":["import {Plugin, Task, Option} from '@taqueria/node-sdk'\nimport compile from './compile'\n\nPlugin.create(i18n => ({\n    schema: \"1.0\",\n    version: \"0.1\",\n    alias: \"ligo\",\n    tasks: [\n        Task.create({\n            task: \"compile\",\n            command: \"compile [sourceFile]\",\n            aliases: [\"c\", \"compile-ligo\"],\n            description: \"Compile a smart contract written in a Ligo syntax to Michelson code\",\n            options: [\n                Option.create({\n                    shortFlag: \"e\",\n                    flag: \"entry-point\",\n                    description: \"The entry point that will be compiled\"\n                }),\n                Option.create({\n                    shortFlag: \"s\",\n                    flag: \"syntax\",\n                    description: \"The syntax used in the contract\"\n                }),\n                Option.create({\n                    shortFlag: \"i\",\n                    flag: \"infer\",\n                    description: \"Enable type inference\"\n                })\n            ],\n            handler: 'proxy',\n            encoding: 'json'\n        })\n    ],\n    checkRuntimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        report: [\n            {name: \"LIGO\", path: \"ligo\", version: \">=0.27.0\", kind: \"required\", met: true}\n        ]\n    }),\n    installRunTimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        output: \"LIGO was found in /usr/bin/ligo\" // TODO this should use i18n\n    }),\n    proxy: compile\n}), process.argv)","import {execCmd, getArch, sendAsyncErr, sendJsonRes, sendErr} from '@taqueria/node-sdk'\nimport {SanitizedArgs, PluginResponse, Failure, LikeAPromise} from \"@taqueria/node-sdk/types\";\nimport {extname, basename, join} from 'path'\nimport glob = require('fast-glob')\n\ntype Opts = SanitizedArgs & Record<string, unknown>\n\nconst getContractArtifactFilename = (opts: Opts) => (sourceFile: string) => {\n    const outFile = basename(sourceFile, extname(sourceFile))\n    return join(opts.config.artifactsDir, `${outFile}.tz`)\n}\n\nconst getInputFilename = (opts: Opts) => (sourceFile: string) => {\n    return join(opts.config.contractsDir, sourceFile)\n}\n\nconst getCompileCommand = (opts: Opts) => (sourceFile: string) => {\n    const {projectDir} = opts\n    const inputFile = getInputFilename (opts) (sourceFile)\n    const baseCommand = `DOCKER_DEFAULT_PLATFORM=linux/amd64 docker run --rm -v \\\"${projectDir}\\\":/project -w /project ligolang/ligo:next compile contract ${inputFile}`\n    const entryPoint = opts.e ? `-e ${opts.e}` : \"\"\n    const syntax = opts[\"-s\"] ? `s ${opts['s']} : \"\"` : \"\"\n    const outFile = `-o ${getContractArtifactFilename(opts)(sourceFile)}`\n    const cmd = `${baseCommand} ${entryPoint} ${syntax} ${outFile}`\n    return cmd\n}\n\nconst compileContract = (opts: Opts) => (sourceFile: string): Promise<{contract: string, artifact: string}> =>\n    getArch()\n    .then(() => getCompileCommand (opts) (sourceFile))\n    .then(execCmd)\n    .then(({stderr}) => { // How should we output warnings?\n        if (stderr.length > 0) sendErr(stderr)\n        return {\n            contract: sourceFile,\n            artifact: getContractArtifactFilename (opts) (sourceFile)\n        }\n    })\n    .catch(err => {\n        sendErr(\" \")\n        sendErr(err.message.split(\"\\n\").slice(1).join(\"\\n\"))\n        return Promise.resolve({\n            contract: sourceFile,\n            artifact: \"Not compiled\"\n        })\n    })\n\nconst compileAll = (parsedArgs: Opts): Promise<{contract: string, artifact: string}[]> => {\n    // TODO: Fetch list of files from SDK\n    return glob(\n        ['**/*.ligo', '**/*.religo', '**/*.mligo', '**/*.jsligo'],\n        {cwd: parsedArgs.contractsDir, absolute: false}\n    )\n    .then(entries => entries.map(compileContract (parsedArgs)))\n    .then(processes => processes.length > 0\n        ? processes\n        : [{contract: \"None found\", artifact: \"N/A\"}]\n    )\n    .then(promises => Promise.all(promises))\n}\n\nexport const compile = <T>(parsedArgs: Opts): LikeAPromise<PluginResponse, Failure<T>> => {\n    const p = parsedArgs.sourceFile\n        ? compileContract (parsedArgs) (parsedArgs.sourceFile as string)\n            .then(result => [result])\n        : compileAll(parsedArgs)\n            .then(results => {\n                if (results.length === 0) sendErr(\"No contracts found to compile.\")\n                return results\n            })\n    \n    return p\n    .then(sendJsonRes)\n    .catch(err => sendAsyncErr(err, false))\n}\n\nexport default compile"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}