var $kQNfl$taquerianodesdk = require("@taqueria/node-sdk");
var $kQNfl$path = require("path");
var $kQNfl$fastglob = require("fast-glob");





const $24b2f47d8f306cb3$var$getContractArtifactFilename = (opts)=>(sourceFile)=>{
        const outFile = $kQNfl$path.basename(sourceFile, $kQNfl$path.extname(sourceFile));
        return $kQNfl$path.join(opts.config.artifactsDir, `${outFile}.tz`);
    }
;
const $24b2f47d8f306cb3$var$getInputFilename = (opts)=>(sourceFile)=>{
        return $kQNfl$path.join(opts.config.contractsDir, sourceFile);
    }
;
const $24b2f47d8f306cb3$var$getCompileCommand = (opts)=>(sourceFile)=>{
        const { projectDir: projectDir  } = opts;
        const inputFile = $24b2f47d8f306cb3$var$getInputFilename(opts)(sourceFile);
        const baseCommand = `DOCKER_DEFAULT_PLATFORM=linux/amd64 docker run --rm -v \"${projectDir}\":/project -w /project ligolang/ligo:next compile contract ${inputFile}`;
        const entryPoint = opts.e ? `-e ${opts.e}` : "";
        const syntax = opts["-s"] ? `s ${opts['s']} : ""` : "";
        const outFile = `-o ${$24b2f47d8f306cb3$var$getContractArtifactFilename(opts)(sourceFile)}`;
        const cmd = `${baseCommand} ${entryPoint} ${syntax} ${outFile}`;
        return cmd;
    }
;
const $24b2f47d8f306cb3$var$compileContract = (opts)=>(sourceFile)=>$kQNfl$taquerianodesdk.getArch().then(()=>$24b2f47d8f306cb3$var$getCompileCommand(opts)(sourceFile)
        ).then($kQNfl$taquerianodesdk.execCmd).then(({ stderr: stderr  })=>{
            if (stderr.length > 0) $kQNfl$taquerianodesdk.sendErr(stderr);
            return {
                contract: sourceFile,
                artifact: $24b2f47d8f306cb3$var$getContractArtifactFilename(opts)(sourceFile)
            };
        }).catch((err)=>{
            $kQNfl$taquerianodesdk.sendErr(" ");
            $kQNfl$taquerianodesdk.sendErr(err.message.split("\n").slice(1).join("\n"));
            return Promise.resolve({
                contract: sourceFile,
                artifact: "Not compiled"
            });
        })
;
const $24b2f47d8f306cb3$var$compileAll = (parsedArgs)=>{
    // TODO: Fetch list of files from SDK
    return $kQNfl$fastglob([
        '**/*.ligo',
        '**/*.religo',
        '**/*.mligo',
        '**/*.jsligo'
    ], {
        cwd: parsedArgs.contractsDir,
        absolute: false
    }).then((entries)=>entries.map($24b2f47d8f306cb3$var$compileContract(parsedArgs))
    ).then((processes)=>processes.length > 0 ? processes : [
            {
                contract: "None found",
                artifact: "N/A"
            }
        ]
    ).then((promises)=>Promise.all(promises)
    );
};
const $24b2f47d8f306cb3$export$ef7acd7185315e22 = (parsedArgs)=>{
    const p = parsedArgs.sourceFile ? $24b2f47d8f306cb3$var$compileContract(parsedArgs)(parsedArgs.sourceFile).then((result)=>[
            result
        ]
    ) : $24b2f47d8f306cb3$var$compileAll(parsedArgs).then((results)=>{
        if (results.length === 0) $kQNfl$taquerianodesdk.sendErr("No contracts found to compile.");
        return results;
    });
    return p.then($kQNfl$taquerianodesdk.sendJsonRes).catch((err)=>$kQNfl$taquerianodesdk.sendAsyncErr(err, false)
    );
};
var $24b2f47d8f306cb3$export$2e2bcd8739ae039 = $24b2f47d8f306cb3$export$ef7acd7185315e22;


$kQNfl$taquerianodesdk.Plugin.create((i18n)=>({
        schema: "1.0",
        version: "0.1",
        alias: "ligo",
        tasks: [
            $kQNfl$taquerianodesdk.Task.create({
                task: "compile",
                command: "compile [sourceFile]",
                aliases: [
                    "c",
                    "compile-ligo"
                ],
                description: "Compile a smart contract written in a Ligo syntax to Michelson code",
                options: [
                    $kQNfl$taquerianodesdk.Option.create({
                        shortFlag: "e",
                        flag: "entry-point",
                        description: "The entry point that will be compiled"
                    }),
                    $kQNfl$taquerianodesdk.Option.create({
                        shortFlag: "s",
                        flag: "syntax",
                        description: "The syntax used in the contract"
                    }),
                    $kQNfl$taquerianodesdk.Option.create({
                        shortFlag: "i",
                        flag: "infer",
                        description: "Enable type inference"
                    })
                ],
                handler: 'proxy',
                encoding: 'json'
            })
        ],
        checkRuntimeDependencies: ()=>Promise.resolve({
                status: "success",
                report: [
                    {
                        name: "LIGO",
                        path: "ligo",
                        version: ">=0.27.0",
                        kind: "required",
                        met: true
                    }
                ]
            })
        ,
        installRunTimeDependencies: ()=>Promise.resolve({
                status: "success",
                output: "LIGO was found in /usr/bin/ligo" // TODO this should use i18n
            })
        ,
        proxy: $24b2f47d8f306cb3$export$2e2bcd8739ae039
    })
, process.argv);


//# sourceMappingURL=index.js.map
